//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\1.12.2"!

/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  net.minecraft.entity.Entity
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketConfirmTeleport
 *  net.minecraft.network.play.client.CPacketPlayer
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraft.network.play.server.SPacketPlayerPosLook
 *  net.minecraft.network.play.server.SPacketPlayerPosLook$EnumFlags
 *  net.minecraft.util.math.BlockPos
 *  net.minecraft.util.math.Vec3d
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 */
package cascade.features.modules.exploit;

import cascade.event.events.MoveEvent;
import cascade.event.events.PacketEvent;
import cascade.features.modules.Module;
import cascade.features.setting.Setting;
import cascade.mixin.mixins.accessor.ISPacketPlayerPosLook;
import cascade.util.entity.EntityUtil;
import cascade.util.misc.TimeVec3d;
import cascade.util.player.MovementUtil;
import cascade.util.player.PlayerUtil;
import java.util.ArrayList;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class PacketFly
extends Module {
    Setting<Mode> mode = this.register(new Setting<Mode>("Mode", Mode.Factor));
    Setting<Boolean> bounds = this.register(new Setting<Boolean>("Bounds", true));
    Setting<Type> type = this.register(new Setting<Object>("Type", (Object)Type.LimitJitter, v -> this.bounds.getValue()));
    Setting<Boolean> strict = this.register(new Setting<Object>("Strict", Boolean.valueOf(false), v -> this.bounds.getValue()));
    Setting<Phase> phase = this.register(new Setting<Phase>("Phase", Phase.NCP));
    Setting<Float> flightSpeed = this.register(new Setting<Float>("FlightSpeed", Float.valueOf(1.0f), Float.valueOf(0.1f), Float.valueOf(2.0f)));
    Setting<Float> phaseSpeed = this.register(new Setting<Float>("PhaseSpeed", Float.valueOf(2.0f), Float.valueOf(0.1f), Float.valueOf(2.0f)));
    Setting<Float> factor = this.register(new Setting<Object>("Factor", Float.valueOf(1.5f), Float.valueOf(0.1f), Float.valueOf(10.0f), v -> this.mode.getValue() == Mode.Factor || this.mode.getValue() == Mode.DeSync));
    Setting<AntiKick> antiKick = this.register(new Setting<AntiKick>("AntiKick", AntiKick.Normal));
    Setting<Limit> limit = this.register(new Setting<Limit>("Limit", Limit.None));
    Setting<Boolean> constrict = this.register(new Setting<Boolean>("Constrict", false));
    Setting<Boolean> jitter = this.register(new Setting<Boolean>("Jitter", false));
    Setting<Boolean> center = this.register(new Setting<Boolean>("Center", false));
    Map<Integer, TimeVec3d> posLooks = new ConcurrentHashMap<Integer, TimeVec3d>();
    ArrayList<CPacketPlayer> packets = new ArrayList();
    CPacketPlayer.Position startingOutOfBoundsPos;
    static Random random = new Random();
    boolean limitStrict = false;
    boolean oddJitter = false;
    int antiKickTicks = 0;
    int factorCounter = 0;
    int jitterTicks = 0;
    int limitTicks = 0;
    double speedX = 0.0;
    double speedY = 0.0;
    double speedZ = 0.0;
    int vDelay = 0;
    int hDelay = 0;
    int teleportId;

    public PacketFly() {
        super("PacketFly", Module.Category.EXPLOIT, "");
    }

    @Override
    public void onEnable() {
        if (PacketFly.fullNullCheck()) {
            return;
        }
        if (!(!this.center.getValue().booleanValue() || this.checkCollisionBox() || PlayerUtil.isChestBelow() || PlayerUtil.isInLiquid() || PacketFly.mc.player.noClip)) {
            MovementUtil.setMotion(0.0, 0.0, 0.0);
            Vec3d CenterPos = EntityUtil.getCenter(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ);
            mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(CenterPos.xCoord, PacketFly.mc.player.posY, CenterPos.zCoord, true));
            PacketFly.mc.player.setPosition(CenterPos.xCoord, PacketFly.mc.player.posY, CenterPos.zCoord);
        }
        this.packets.clear();
        this.posLooks.clear();
        this.teleportId = 0;
        this.vDelay = 0;
        this.hDelay = 0;
        this.antiKickTicks = 0;
        this.limitTicks = 0;
        this.jitterTicks = 0;
        this.speedX = 0.0;
        this.speedY = 0.0;
        this.speedZ = 0.0;
        this.oddJitter = false;
        this.startingOutOfBoundsPos = null;
        this.startingOutOfBoundsPos = new CPacketPlayer.Position(this.randomHorizontal(), 1.0, this.randomHorizontal(), PacketFly.mc.player.onGround);
        this.packets.add((CPacketPlayer)this.startingOutOfBoundsPos);
    }

    @SubscribeEvent
    public void onMove(MoveEvent e) {
        if (PacketFly.fullNullCheck() || this.isDisabled()) {
            return;
        }
        if (PacketFly.mc.player.ticksExisted % 20 == 0) {
            this.cleanPosLooks();
        }
        PacketFly.mc.player.setVelocity(0.0, 0.0, 0.0);
        if (this.teleportId <= 0 && this.mode.getValue() != Mode.SetBack) {
            this.startingOutOfBoundsPos = new CPacketPlayer.Position(this.randomHorizontal(), 1.0, this.randomHorizontal(), PacketFly.mc.player.onGround);
            this.packets.add((CPacketPlayer)this.startingOutOfBoundsPos);
            mc.getConnection().sendPacket((Packet)this.startingOutOfBoundsPos);
            return;
        }
        boolean phasing = this.checkCollisionBox();
        this.speedX = 0.0;
        this.speedY = 0.0;
        this.speedZ = 0.0;
        if (PacketFly.mc.gameSettings.keyBindJump.isKeyDown() && this.hDelay < 1) {
            this.speedY = PacketFly.mc.player.ticksExisted % (this.mode.getValue() == Mode.SetBack || this.mode.getValue() == Mode.Slow || this.limit.getValue() == Limit.Strict ? 10 : 20) == 0 ? (this.antiKick.getValue() != AntiKick.None && !phasing ? -0.032 : 0.062) : 0.062;
            this.antiKickTicks = 0;
            this.vDelay = 5;
        } else if (!PacketFly.mc.gameSettings.keyBindJump.isKeyDown() && PacketFly.mc.gameSettings.keyBindSneak.isKeyDown() && this.hDelay < 1) {
            this.speedY = -0.062;
            this.antiKickTicks = 0;
            this.vDelay = 5;
        }
        if (!PacketFly.mc.gameSettings.keyBindSneak.isKeyDown() || !PacketFly.mc.gameSettings.keyBindJump.isKeyDown()) {
            double[] dir;
            if (MovementUtil.isMoving() && ((dir = MovementUtil.strafe(phasing && this.phase.getValue() == Phase.NCP ? 0.031 * (double)this.phaseSpeed.getValue().floatValue() : 0.26 * (double)this.flightSpeed.getValue().floatValue()))[0] != 0.0 || dir[1] != 0.0) && this.vDelay < 1) {
                this.speedX = dir[0];
                this.speedZ = dir[1];
                this.hDelay = 5;
            }
            if (!(this.antiKick.getValue() == AntiKick.None || this.limit.getValue() != Limit.None && this.limitTicks == 0 || phasing)) {
                if (this.antiKickTicks < (this.type.getValue() == Type.Bypass && this.bounds.getValue() == false ? 1 : 3)) {
                    ++this.antiKickTicks;
                } else {
                    this.antiKickTicks = 0;
                    if (this.antiKick.getValue() != AntiKick.Limited) {
                        double d = this.speedY = this.antiKick.getValue() == AntiKick.Strict ? -0.08 : -0.04;
                    }
                }
            }
        }
        if (phasing && (this.phase.getValue() == Phase.NCP && (double)PacketFly.mc.player.field_191988_bg != 0.0 || (double)PacketFly.mc.player.moveStrafing != 0.0 && this.speedY != 0.0)) {
            this.speedY /= 2.5;
        }
        if (this.limit.getValue() != Limit.None) {
            if (this.limitTicks == 0) {
                this.speedX = 0.0;
                this.speedY = 0.0;
                this.speedZ = 0.0;
            } else if (this.limitTicks == 2 && this.jitter.getValue().booleanValue()) {
                if (this.oddJitter) {
                    this.speedX = 0.0;
                    this.speedY = 0.0;
                    this.speedZ = 0.0;
                }
                this.oddJitter = !this.oddJitter;
            }
        } else if (this.jitter.getValue().booleanValue() && this.jitterTicks == 7) {
            this.speedX = 0.0;
            this.speedY = 0.0;
            this.speedZ = 0.0;
        }
        switch (this.mode.getValue()) {
            case Fast: {
                PacketFly.mc.player.setVelocity(this.speedX, this.speedY, this.speedZ);
                this.sendPackets(this.speedX, this.speedY, this.speedZ, this.type.getValue(), true, false);
                break;
            }
            case Slow: {
                this.sendPackets(this.speedX, this.speedY, this.speedZ, this.type.getValue(), true, false);
                break;
            }
            case SetBack: {
                PacketFly.mc.player.setVelocity(this.speedX, this.speedY, this.speedZ);
                this.sendPackets(this.speedX, this.speedY, this.speedZ, this.type.getValue(), false, false);
                break;
            }
            case Factor: 
            case DeSync: {
                float rawFactor = this.factor.getValue().floatValue();
                int factorInt = (int)Math.floor(rawFactor);
                ++this.factorCounter;
                if (this.factorCounter > (int)(20.0 / (((double)rawFactor - (double)factorInt) * 20.0))) {
                    ++factorInt;
                    this.factorCounter = 0;
                }
                for (int i = 1; i <= factorInt; ++i) {
                    PacketFly.mc.player.setVelocity(this.speedX * (double)i, this.speedY * (double)i, this.speedZ * (double)i);
                    this.sendPackets(this.speedX * (double)i, this.speedY * (double)i, this.speedZ * (double)i, this.type.getValue(), true, false);
                }
                this.speedX = PacketFly.mc.player.motionX;
                this.speedY = PacketFly.mc.player.motionY;
                this.speedZ = PacketFly.mc.player.motionZ;
            }
        }
        --this.vDelay;
        --this.hDelay;
        if (this.constrict.getValue().booleanValue() && (this.limit.getValue() == Limit.None || this.limitTicks > 1)) {
            mc.getConnection().sendPacket((Packet)new CPacketPlayer.Position(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ, false));
        }
        ++this.limitTicks;
        ++this.jitterTicks;
        if (this.limitTicks > (this.limit.getValue() == Limit.Strict ? (this.limitStrict ? 1 : 2) : 3)) {
            this.limitTicks = 0;
            boolean bl = this.limitStrict = !this.limitStrict;
        }
        if (this.jitterTicks > 7) {
            this.jitterTicks = 0;
        }
        if (this.mode.getValue() != Mode.SetBack && this.teleportId <= 0) {
            return;
        }
        if (this.mode.getValue() != Mode.Slow) {
            e.setX(this.speedX);
            e.setY(this.speedY);
            e.setZ(this.speedZ);
        }
        if (this.phase.getValue() == Phase.Vanilla || this.checkCollisionBox()) {
            PacketFly.mc.player.noClip = true;
        }
    }

    void sendPackets(double x, double y, double z, Type type, boolean sendConfirmTeleport, boolean sendExtraCT) {
        Vec3d nextPos = new Vec3d(PacketFly.mc.player.posX + x, PacketFly.mc.player.posY + y, PacketFly.mc.player.posZ + z);
        Vec3d bounds = this.getBoundsVec(x, y, z, type);
        CPacketPlayer.Position nextPosPacket = new CPacketPlayer.Position(nextPos.xCoord, nextPos.yCoord, nextPos.zCoord, PacketFly.mc.player.onGround);
        this.packets.add((CPacketPlayer)nextPosPacket);
        mc.getConnection().sendPacket((Packet)nextPosPacket);
        if (this.limit.getValue() != Limit.None && this.limitTicks == 0) {
            return;
        }
        CPacketPlayer.Position boundsPacket = new CPacketPlayer.Position(bounds.xCoord, bounds.yCoord, bounds.zCoord, PacketFly.mc.player.onGround);
        this.packets.add((CPacketPlayer)boundsPacket);
        mc.getConnection().sendPacket((Packet)boundsPacket);
        if (sendConfirmTeleport) {
            ++this.teleportId;
            if (sendExtraCT) {
                mc.getConnection().sendPacket((Packet)new CPacketConfirmTeleport(this.teleportId - 1));
            }
            mc.getConnection().sendPacket((Packet)new CPacketConfirmTeleport(this.teleportId));
            this.posLooks.put(this.teleportId, new TimeVec3d(nextPos.xCoord, nextPos.yCoord, nextPos.zCoord, System.currentTimeMillis()));
            if (sendExtraCT) {
                mc.getConnection().sendPacket((Packet)new CPacketConfirmTeleport(this.teleportId + 1));
            }
        }
    }

    Vec3d getBoundsVec(double x, double y, double z, Type type) {
        switch (type) {
            case Up: {
                return new Vec3d(PacketFly.mc.player.posX + x, this.bounds.getValue() != false ? (double)(this.strict.getValue() != false ? 255 : 256) : PacketFly.mc.player.posY + 420.0, PacketFly.mc.player.posZ + z);
            }
            case Preserve: {
                return new Vec3d(this.bounds.getValue() != false ? PacketFly.mc.player.posX + this.randomHorizontal() : this.randomHorizontal(), this.strict.getValue() != false ? Math.max(PacketFly.mc.player.posY, 2.0) : PacketFly.mc.player.posY, this.bounds.getValue() != false ? PacketFly.mc.player.posZ + this.randomHorizontal() : this.randomHorizontal());
            }
            case LimitJitter: {
                return new Vec3d(PacketFly.mc.player.posX + (this.strict.getValue() != false ? x : this.randomLimitedHorizontal()), PacketFly.mc.player.posY + PacketFly.randomLimitedVertical(), PacketFly.mc.player.posZ + (this.strict.getValue() != false ? z : this.randomLimitedHorizontal()));
            }
            case Bypass: {
                if (this.bounds.getValue().booleanValue()) {
                    double rawY = y * 510.0;
                    return new Vec3d(PacketFly.mc.player.posX + x, PacketFly.mc.player.posY + (rawY > (double)(PacketFly.mc.player.dimension == -1 ? 127 : 255) ? -rawY : (rawY < 1.0 ? -rawY : rawY)), PacketFly.mc.player.posZ + z);
                }
                return new Vec3d(PacketFly.mc.player.posX + (x == 0.0 ? (double)(random.nextBoolean() ? -10 : 10) : x * 38.0), PacketFly.mc.player.posY + y, PacketFly.mc.player.posX + (z == 0.0 ? (double)(random.nextBoolean() ? -10 : 10) : z * 38.0));
            }
            case Obscure: {
                return new Vec3d(PacketFly.mc.player.posX + this.randomHorizontal(), Math.max(1.5, Math.min(PacketFly.mc.player.posY + y, 253.5)), PacketFly.mc.player.posZ + this.randomHorizontal());
            }
        }
        return new Vec3d(PacketFly.mc.player.posX + x, this.bounds.getValue() != false ? (double)(this.strict.getValue() != false ? 1 : 0) : PacketFly.mc.player.posY - 1337.0, PacketFly.mc.player.posZ + z);
    }

    double randomHorizontal() {
        int randomValue = random.nextInt(this.bounds.getValue().booleanValue() ? 80 : (this.type.getValue() == Type.Obscure ? (PacketFly.mc.player.ticksExisted % 2 == 0 ? 480 : 100) : 29000000)) + (this.bounds.getValue() != false ? 5 : 500);
        if (random.nextBoolean()) {
            return randomValue;
        }
        return -randomValue;
    }

    public static double randomLimitedVertical() {
        int randomValue = random.nextInt(22);
        randomValue += 70;
        if (random.nextBoolean()) {
            return randomValue;
        }
        return -randomValue;
    }

    double randomLimitedHorizontal() {
        int randomValue = random.nextInt(10);
        if (random.nextBoolean()) {
            return randomValue;
        }
        return -randomValue;
    }

    void cleanPosLooks() {
        this.posLooks.forEach((tp, timeVec3d) -> {
            if (System.currentTimeMillis() - timeVec3d.getTime() > TimeUnit.SECONDS.toMillis(30L)) {
                this.posLooks.remove(tp);
            }
        });
    }

    @SubscribeEvent
    public void onPacketReceive(PacketEvent.Receive e) {
        if (PacketFly.fullNullCheck() || this.isDisabled()) {
            this.teleportId = 0;
            return;
        }
        if (e.getPacket() instanceof SPacketPlayerPosLook) {
            SPacketPlayerPosLook packet = (SPacketPlayerPosLook)e.getPacket();
            if (PacketFly.mc.player.isEntityAlive()) {
                if (this.teleportId <= 0) {
                    this.teleportId = ((SPacketPlayerPosLook)e.getPacket()).getTeleportId();
                } else if (PacketFly.mc.world.isBlockLoaded(new BlockPos(PacketFly.mc.player.posX, PacketFly.mc.player.posY, PacketFly.mc.player.posZ), false) && this.mode.getValue() != Mode.SetBack) {
                    if (this.mode.getValue() == Mode.DeSync) {
                        this.posLooks.remove(packet.getTeleportId());
                        e.setCanceled(true);
                        if (this.mode.getValue() == Mode.Slow) {
                            PacketFly.mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());
                        }
                        return;
                    }
                    if (this.posLooks.containsKey(packet.getTeleportId())) {
                        TimeVec3d vec = this.posLooks.get(packet.getTeleportId());
                        if (vec.xCoord == packet.getX() && vec.yCoord == packet.getY() && vec.zCoord == packet.getZ()) {
                            this.posLooks.remove(packet.getTeleportId());
                            e.setCanceled(true);
                            if (this.mode.getValue() == Mode.Slow) {
                                PacketFly.mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());
                            }
                            return;
                        }
                    }
                }
            }
            ((ISPacketPlayerPosLook)packet).setYaw(PacketFly.mc.player.rotationYaw);
            ((ISPacketPlayerPosLook)packet).setPitch(PacketFly.mc.player.rotationPitch);
            packet.getFlags().remove(SPacketPlayerPosLook.EnumFlags.X_ROT);
            packet.getFlags().remove(SPacketPlayerPosLook.EnumFlags.Y_ROT);
            this.teleportId = packet.getTeleportId();
        }
    }

    boolean checkCollisionBox() {
        if (!PacketFly.mc.world.getCollisionBoxes((Entity)PacketFly.mc.player, PacketFly.mc.player.getEntityBoundingBox().addCoord(0.0, 0.0, 0.0)).isEmpty()) {
            return true;
        }
        return !PacketFly.mc.world.getCollisionBoxes((Entity)PacketFly.mc.player, PacketFly.mc.player.getEntityBoundingBox().offset(0.0, 2.0, 0.0).func_191195_a(0.0, 1.99, 0.0)).isEmpty();
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send e) {
        if (PacketFly.fullNullCheck() || this.isDisabled()) {
            return;
        }
        if (e.getPacket() instanceof CPacketPlayer && !(e.getPacket() instanceof CPacketPlayer.Position)) {
            e.setCanceled(true);
        }
        if (e.getPacket() instanceof CPacketPlayer) {
            CPacketPlayer packet = (CPacketPlayer)e.getPacket();
            if (this.packets.contains(packet)) {
                this.packets.remove(packet);
                return;
            }
            e.setCanceled(true);
        }
    }

    static enum Limit {
        None,
        Strong,
        Strict;

    }

    static enum AntiKick {
        None,
        Normal,
        Limited,
        Strict;

    }

    static enum Phase {
        None,
        Vanilla,
        NCP;

    }

    static enum Type {
        Up,
        Preserve,
        Down,
        LimitJitter,
        Bypass,
        Obscure;

    }

    static enum Mode {
        Factor,
        SetBack,
        Fast,
        Slow,
        DeSync;

    }
}

